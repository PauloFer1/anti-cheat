package com.pfernand.anticheat.services;

import static org.junit.jupiter.api.Assertions.*;

import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Paths;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;

@ExtendWith(MockitoExtension.class)
class PasswordWriterTest {

  private static final String CONTENT = "// generated by moh:aa do not modify"
      + "//"
      + "// Key Bindings"
      + "//"
      + "unbindall"
      + "bind TAB \"+scores\""
      + "bind ESCAPE \"togglemenu\""
      + "bind SPACE \"+moveup\""
      + "// Cvars"
      + "//"
      + "seta sv_hostname \"==Rick's Great Battle==\""
      + "seta dm_playergermanmodel \"german_waffenss_shutze\""
      + "seta rate \"30000\""
      + "seta r_gamma \"1.207237\""
      + ""
      + "//"
      + "// Aliases"
      + "//"
      + "alias aliascheck \"steu CI_AliasCk 177\""
      + "alias setu \"\""
      + "alias leave_team \"echo\""
      + "alias screenshot \"say I have been caught with a hacked SS\""
      + "seta password \"otherThanCovid3\"";

  private PasswordWriter passwordWriter = new PasswordWriter();

  @Test
  void setPasswordShouldReplacePassword() throws IOException {
    final String file = PasswordWriterTest.class.getClassLoader().getResource("config/file.cfg").getPath();

    passwordWriter.setPassword(file, "otherThanCovid3");

    final StringBuilder stringBuilder = new StringBuilder();
    Files.lines(Paths.get(file), StandardCharsets.UTF_8)
        .forEach(stringBuilder::append);

    assertEquals(CONTENT, stringBuilder.toString());
  }

  @Test
  void setPasswordShouldInsertPassword() throws IOException {
    final String file = PasswordWriterTest.class.getClassLoader().getResource("config/file_without_line.cfg").getPath();

    passwordWriter.setPassword(file, "otherThanCovid3");

    final StringBuilder stringBuilder = new StringBuilder();
    Files.lines(Paths.get(file), StandardCharsets.UTF_8)
        .forEach(stringBuilder::append);

    assertEquals(CONTENT, stringBuilder.toString());
  }

  @Test
  void createFileAndsetPassword() throws IOException {
    final String file = PasswordWriterTest.class.getClassLoader().getResource("config").getPath() + "/new_file.cfg";

    passwordWriter.setPassword(file, "otherThanCovid3");

    final StringBuilder stringBuilder = new StringBuilder();
    Files.lines(Paths.get(file), StandardCharsets.UTF_8)
        .forEach(stringBuilder::append);

    assertEquals("seta password \"otherThanCovid3\"", stringBuilder.toString());
  }
}